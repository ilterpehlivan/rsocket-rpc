// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsocket/options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rsocket_2foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rsocket_2foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rsocket_2foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rsocket_2foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rsocket_2foptions_2eproto;
namespace io {
namespace rsocket {
namespace rpc {
class RSocketMethodOptions;
class RSocketMethodOptionsDefaultTypeInternal;
extern RSocketMethodOptionsDefaultTypeInternal _RSocketMethodOptions_default_instance_;
}  // namespace rpc
}  // namespace rsocket
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::rsocket::rpc::RSocketMethodOptions* Arena::CreateMaybeMessage<::io::rsocket::rpc::RSocketMethodOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace rsocket {
namespace rpc {

// ===================================================================

class RSocketMethodOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.rsocket.rpc.RSocketMethodOptions) */ {
 public:
  RSocketMethodOptions();
  virtual ~RSocketMethodOptions();

  RSocketMethodOptions(const RSocketMethodOptions& from);
  RSocketMethodOptions(RSocketMethodOptions&& from) noexcept
    : RSocketMethodOptions() {
    *this = ::std::move(from);
  }

  inline RSocketMethodOptions& operator=(const RSocketMethodOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSocketMethodOptions& operator=(RSocketMethodOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RSocketMethodOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RSocketMethodOptions* internal_default_instance() {
    return reinterpret_cast<const RSocketMethodOptions*>(
               &_RSocketMethodOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RSocketMethodOptions& a, RSocketMethodOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RSocketMethodOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RSocketMethodOptions* New() const final {
    return CreateMaybeMessage<RSocketMethodOptions>(nullptr);
  }

  RSocketMethodOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RSocketMethodOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RSocketMethodOptions& from);
  void MergeFrom(const RSocketMethodOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSocketMethodOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.rsocket.rpc.RSocketMethodOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rsocket_2foptions_2eproto);
    return ::descriptor_table_rsocket_2foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFireAndForgetFieldNumber = 1,
  };
  // bool fire_and_forget = 1;
  void clear_fire_and_forget();
  bool fire_and_forget() const;
  void set_fire_and_forget(bool value);
  private:
  bool _internal_fire_and_forget() const;
  void _internal_set_fire_and_forget(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.rsocket.rpc.RSocketMethodOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool fire_and_forget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rsocket_2foptions_2eproto;
};
// ===================================================================

static const int kOptionsFieldNumber = 1057;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::io::rsocket::rpc::RSocketMethodOptions >, 11, false >
  options;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RSocketMethodOptions

// bool fire_and_forget = 1;
inline void RSocketMethodOptions::clear_fire_and_forget() {
  fire_and_forget_ = false;
}
inline bool RSocketMethodOptions::_internal_fire_and_forget() const {
  return fire_and_forget_;
}
inline bool RSocketMethodOptions::fire_and_forget() const {
  // @@protoc_insertion_point(field_get:io.rsocket.rpc.RSocketMethodOptions.fire_and_forget)
  return _internal_fire_and_forget();
}
inline void RSocketMethodOptions::_internal_set_fire_and_forget(bool value) {
  
  fire_and_forget_ = value;
}
inline void RSocketMethodOptions::set_fire_and_forget(bool value) {
  _internal_set_fire_and_forget(value);
  // @@protoc_insertion_point(field_set:io.rsocket.rpc.RSocketMethodOptions.fire_and_forget)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace rsocket
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rsocket_2foptions_2eproto
