{{#packageName}}
package {{packageName}};
{{/packageName}}

import static io.grpc.MethodDescriptor.generateFullMethodName;
import io.rsocket.RSocket;
import io.grpc.MethodDescriptor;
import io.grpc.MethodDescriptor.MethodType;
import io.grpc.protobuf.ProtoUtils;
import io.rsocket.rpc.core.extension.routing.ServerCalls.BiDirectionStreamingMethod;
import io.rsocket.rpc.core.extension.routing.ServerCalls.ClientStreamingMethod;
import io.rsocket.rpc.core.extension.routing.ServerCalls.FireAndForgetMethod;
import io.rsocket.rpc.core.extension.routing.ServerCalls.RequestResponseMethod;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.CorePublisher;
import com.google.common.collect.ImmutableMap;
import java.util.Map;

{{#deprecated}}
@java.lang.Deprecated
{{/deprecated}}
@javax.annotation.Generated(
value = "by Rsocket RPC generator",
comments = "Source: {{protoName}}")
public final class {{className}} {

    private {{className}}() {}

    public static Rsocket{{serviceName}}Stub newReactorStub(io.rsocket.rpc.core.extension.RpcClient client) {
        return new Rsocket{{serviceName}}Stub(client.getrSocketMono());
    }

    public static Rsocket{{serviceName}}Stub newReactorStub(
        io.rsocket.rpc.core.extension.RsocketClientBuilder clientBuilder) {
      return new Rsocket{{serviceName}}Stub(
            clientBuilder
                  .serviceName({{serviceName}}ImplBase.SERVICE)
                  .addMethods(methods)
                  .build()
                  .getrSocketMono());
    }

    {{#javaDoc}}
    {{{javaDoc}}}
    {{/javaDoc}}
    public static final class Rsocket{{serviceName}}Stub {

        private final Mono<RSocket> rSocketMono;

        private Rsocket{{serviceName}}Stub(Mono<RSocket> rSocketMono) {
            this.rSocketMono = rSocketMono;
        }

        {{#methods}}

          {{#javaDoc}}
            {{{javaDoc}}}
          {{/javaDoc}}
          {{#deprecated}}
            @java.lang.Deprecated
          {{/deprecated}}
          public {{#isManyOutput}}reactor.core.publisher.Flux{{/isManyOutput}}{{^isManyOutput}}reactor.core.publisher.Mono{{/isManyOutput}}<{{outputType}}> {{methodName}}({{#isManyInput}}reactor.core.publisher.Flux<{{inputType}}>{{/isManyInput}}{{^isManyInput}}{{inputType}}{{/isManyInput}} request,io.netty.buffer.ByteBuf metadata) {
          return io.rsocket.rpc.core.extension.routing.ClientCalls.{{reactiveCallsMethodName}}(
          rSocketMono,
          request,
          metadata,
          {{serviceName}}ImplBase.SERVICE,
          "{{methodName}}",
          {{outputType}}.parser());
          }

            {{#javaDoc}}
        {{{javaDoc}}}
            {{/javaDoc}}
            {{#deprecated}}
        @java.lang.Deprecated
            {{/deprecated}}
        public {{#isManyOutput}}reactor.core.publisher.Flux{{/isManyOutput}}{{^isManyOutput}}reactor.core.publisher.Mono{{/isManyOutput}}<{{outputType}}> {{methodName}}({{#isManyInput}}reactor.core.publisher.Flux<{{inputType}}>{{/isManyInput}}{{^isManyInput}}{{inputType}}{{/isManyInput}} request) {
            return {{methodName}}(
          request,
          io.netty.buffer.Unpooled.EMPTY_BUFFER);
        }

        {{/methods}}

    }

    {{#javaDoc}}
    {{{javaDoc}}}
    {{/javaDoc}}
    public static interface {{serviceName}}ImplBase extends io.grpc.BindableService {

        public String SERVICE = "{{packageName}}.{{serviceName}}";

        {{#methods}}
            {{#javaDoc}}
        {{{javaDoc}}}
            {{/javaDoc}}
            {{#deprecated}}
        @java.lang.Deprecated
            {{/deprecated}}
        public {{#isManyOutput}}reactor.core.publisher.Flux{{/isManyOutput}}{{^isManyOutput}}reactor.core.publisher.Mono{{/isManyOutput}}<{{outputType}}> {{methodName}}({{#isManyInput}}reactor.core.publisher.Flux<{{inputType}}>{{/isManyInput}}{{^isManyInput}}{{inputType}}{{/isManyInput}} request,io.netty.buffer.ByteBuf metadata);
        {{/methods}}

        @java.lang.Override public default io.grpc.ServerServiceDefinition bindService() {
            return io.grpc.ServerServiceDefinition.builder(SERVICE)
                    {{#methods}}
                      .addMethod(
                            getMethod(SERVICE,
                                     METHOD_{{methodNameUpperUnderscore}},
                                     io.rsocket.rpc.core.extension.routing.ServerCalls.{{grpcCallsMethodName}}(),
                                     io.rsocket.rpc.core.extension.routing.SchemaDescriptor.getRpcMethod("{{reactiveCallsMethodName}}"),
                                     {{inputType}}.getDefaultInstance(),
                                     {{outputType}}.getDefaultInstance()),
                                     io.rsocket.rpc.core.extension.routing.ServerCalls.{{reactiveCallsMethodName}}(new MethodHandlers<{{inputType}}, {{outputType}}>(
                                     this, METHODID_{{methodNameUpperUnderscore}})))

                    {{/methods}}
                    .build();
        }

        static <TRequest extends com.google.protobuf.Message,TResponse extends com.google.protobuf.Message> MethodDescriptor<TRequest, TResponse> getMethod(
              String service, String method, MethodType methodType,String rpcMethodName,final TRequest requestInstance,final TResponse responseInstance) {
              return MethodDescriptor.<TRequest, TResponse>newBuilder()
                    .setFullMethodName(generateFullMethodName(service, method))
                    .setType(methodType)
                    .setSchemaDescriptor(
                        new io.rsocket.rpc.core.extension.routing.SchemaDescriptor(service, method, methodType, rpcMethodName))
                    .setRequestMarshaller(ProtoUtils.<TRequest>marshaller(requestInstance))
                    .setResponseMarshaller(ProtoUtils.<TResponse>marshaller(responseInstance))
                    .setSampledToLocalTracing(true)
                    .build();
        }
    }

    private static final Map<String, String> methods =
      ImmutableMap.<String, String>builder()
          {{#methods}}
          .put(io.rsocket.rpc.core.extension.routing.SchemaDescriptor.getRpcMethod("{{reactiveCallsMethodName}}"), "{{methodName}}")
          {{/methods}}
          .build();

    {{#methods}}
    private static final int METHODID_{{methodNameUpperUnderscore}} = {{methodNumber}};
    private static final String METHOD_{{methodNameUpperUnderscore}} = "{{methodName}}";
    {{/methods}}

    private static final class MethodHandlers<Req, Resp> implements
                                RequestResponseMethod<Req, Resp>,
                                FireAndForgetMethod<Req, Resp>,
                                ClientStreamingMethod<Req, Resp>,
                                BiDirectionStreamingMethod<Req, Resp>{
        private final {{serviceName}}ImplBase serviceImpl;
        private final int methodId;

        MethodHandlers({{serviceName}}ImplBase serviceImpl, int methodId) {
            this.serviceImpl = serviceImpl;
            this.methodId = methodId;
        }

    @Override
    @java.lang.SuppressWarnings("unchecked")
    public CorePublisher<Resp> apply(Req req, io.netty.buffer.ByteBuf byteBuf) {
      switch (methodId) {
        {{#methods}}
        {{^isManyInput}}
        case METHODID_{{methodNameUpperUnderscore}}:
          return (CorePublisher<Resp>) serviceImpl.{{methodName}}(({{inputType}}) req, byteBuf);
        {{/isManyInput}}
        {{/methods}}
        default:
          return reactor.core.publisher.Flux.error(new UnsupportedOperationException());
      }
    }

      @Override
      @java.lang.SuppressWarnings("unchecked")
      public Flux<Resp> apply(Publisher<Req> publisher, io.netty.buffer.ByteBuf byteBuf) {
        switch (methodId) {
          {{#methods}}
          {{#isManyInput}}
            case METHODID_{{methodNameUpperUnderscore}}:
            return (Flux<Resp>)
              serviceImpl.{{methodName}}(
                          Flux.from((Publisher<{{inputType}}>) publisher), byteBuf);
          {{/isManyInput}}
          {{/methods}}
                default:
                  return reactor.core.publisher.Flux.error(new UnsupportedOperationException());
            }
      }


    }
}